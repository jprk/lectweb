<?php

/**
 * @file LDAPConnection.class.php
 *
 * Search and authenticate against LDAP.
 *
 * This class provides connection, search and bind capabilities for LDAP
 * protocol. It can be used to query information about users and to verify
 * users against their LDAP aacounts.
 *
 * @author Jan Přikryl
 *
 */
class LDAPConnection
{

    private $serverURL;
    private $basedn;
    private $proxy_user;
    private $proxy_pass;
    private $ldap;

    static function isActive(&$smarty)
    {
        return $smarty->_config['ldap_active'];
    }

    /**
     * Class constructor.
     * Opens connection to an LDAP server. Checked only with URL based
     * ldaps:// connections.
     * @param $smarty Smarty object containing configuration parameters of the
     *                LDAP connection, 'ldap_server_url' and 'ldap_basedn'.
     */
    function __construct(&$smarty)
    {
        /* Initialise configuration parameters from Smarty config. */
        $this->serverURL = $smarty->_config['ldap_server_url'];
        $this->basedn = $smarty->_config['ldap_basedn'];
        $this->proxy_user = $smarty->_config['ldap_proxy_user'];
        $this->proxy_pass = $smarty->_config['ldap_proxy_pass'];

        /* Initialise LDAP connection for LDAP search of usernames and e-mails. */
        $this->ldap = ldap_connect($this->serverURL);
        if (!$this->ldap) {
            /* Even if the URL above is wrong, the connection will not fail if
               using OpenLDAP 2.x.x */
            throw new Exception (
                'Nelze se spojit s LDAP serverem ' .
                $this->serverURL
            );
        }

        /* Default protocol version is 2. */
        ldap_set_option($this->ldap, LDAP_OPT_PROTOCOL_VERSION, 3);
    }

    /**
     * Search for information in the LDAP database.
     * @param $searchString Search string in the form '<item>=<value>'.
     * @return The corresponding LDAP record, if any.
     */
    function searchSingle($searchString)
    {
        /* Fetch information from LDAP about this student.
           Mask out warnings generated by unavailable servers. */
        $res = @ldap_search($this->ldap,
            $this->basedn,
            $searchString);
        if (!$res) {
            $errno = ldap_errno($this->ldap);
            $estr = ldap_err2str($errno);
            throw new Exception (
                "Chyba LDAP při vyhledávání `$searchString`: $estr " .
                '(server ' . $this->serverURL . ').');
        }

        /* Check the number of entries. */
        $entries = ldap_count_entries($this->ldap, $res);
        if ($entries > 1) {
            throw new Exception ("Got $entries for `$searchString`, expected 0 or 1.");
        }

        /* Get the entry, if any. */
        $ret = NULL;
        if ($entries == 1) {
            $info = ldap_get_entries($this->ldap, $res);
            $ret = $info[0];
        }

        return $ret;
    }

    /**
     * Bind to the server with specified user DN and password.
     * @param $userDN string Fully qualified username
     * @param $password string
     * @return TRUE if the bind was successful, false otherwise.
     */
    function bind($userDN, $password)
    {
        @$ldapbind = ldap_bind($this->ldap, $userDN, $password);
        return ($ldapbind === true);
    }

    /**
     * Close / unbind the LDAP connection.
     */
    function close()
    {
        ldap_unbind($this->ldap);
    }
}